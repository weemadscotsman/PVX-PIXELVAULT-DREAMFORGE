üîê PIXELVAULT CHAIN ‚Äî FULL REPLIT BUILD SPEC (PRIVATE CHAIN + WALLET BACKEND)
üß± CHAIN OVERVIEW
Chain Name: PixelVault (PVX)

Type: Private, standalone blockchain

Consensus: Proof-of-Work hybrid (fair mining), with future zkSNARK layer

Token: PVX (fixed supply, utility & governance)

ZK Support: Yes ‚Äî Halo2/ZEXE pipeline (stubbed for now, mocked for initial MVP)

ü™ô TOKEN SPECS (PVX)
Total Supply: 6,009,420,000 PVX

Decimals: 18

Ticker: PVX

Burning: Optional; future on-chain governance

Distribution Rules:

No pre-mine

Fair launch (via mining)

Monthly staking rewards via CLI + Dashboard

Validator incentive pool (fixed % per block)

üìÅ BASE FILES (BACKEND STRUCTURE ‚Äî IN PixelVault_Backend.zip)
/core/: Blockchain logic (block.rs, ledger.rs, transaction.rs, mining.rs, etc.)

/wallet/: Wallet system (create, send, receive, sign tx)

/api/: Live RESTful endpoints using FastAPI (Python) or Rocket (Rust, optional)

/db/: SQLite for now (to be replaced with LMDB or RocksDB)

/cli/: Command-line interface for wallet + node

/zk/: Stubbed folder for zkSNARK integration

/utils/: Signature helpers, address derivation, hashing

/config/: Chain parameters, genesis setup, consensus config

üõ†Ô∏è CORE FEATURES REQUIRED
‚úÖ Wallet System
Create new wallet (auto-generated seed & address)

Restore wallet via mnemonic

View balance

Sign + send transaction

Export private key

‚úÖ Blockchain Core
Custom genesis block with PVX token preloaded

Block mining (PoW)

Transaction pool (mempool)

Peer-to-peer networking (optional, stub for now)

‚úÖ API Endpoints
Endpoint	Method	Description
/api/create-wallet	POST	Returns address + mnemonic
/api/balance/<address>	GET	Returns PVX balance
/api/send	POST	Sends PVX from A to B
/api/transactions	GET	View mempool
/api/mine	POST	Manually mines a block

‚úÖ Staking
CLI tool to lock tokens

Accrue rewards over time

Unstake with cooldown

‚úÖ Explorer Logic (Backend Only)
Endpoint for /api/block/<id> + /api/tx/<id>

List blocks, view chain state

üîß RULES TO REMEMBER
The wallet, chain, and token must talk to each other natively, no Web3 emulation

Frontend dashboard already built ‚Äî Replit is only wiring real backend logic into those panels

All functions must return clean JSON responses for frontend use

PVX is the only currency ‚Äî no ETH, no gas simulations

üîê SECURITY NOTES
Private keys must never be stored server-side

Mnemonics only shown on wallet creation (not stored)

Transaction signing happens on the client or CLI tool

Hashing: Use SHA256 + RIPEMD160 (like BTC)

‚öôÔ∏è OPTIONAL MOCK DATA
If chain isn‚Äôt live yet, provide:

Static wallet addresses + fake balances

Simulated transactions

Mock mining output

üß† FINAL NOTES TO REPLIT
This is not a toy chain ‚Äî it‚Äôs a real, standalone blockchain

You are connecting the existing frontend dashboard to real backend wallet/chain logic

Any broken route, missing response, or stubs must be flagged immediately

All endpoints must be testable via CURL/Postman before full frontend wire-in

CLI tools will coexist with dashboard ‚Äî everything must be modular