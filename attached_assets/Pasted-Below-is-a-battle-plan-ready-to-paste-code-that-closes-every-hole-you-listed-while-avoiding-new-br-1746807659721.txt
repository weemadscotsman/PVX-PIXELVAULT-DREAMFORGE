Below is a battle-plan + ready-to-paste code that closes every hole you listed while avoiding new breakages.

1 — Signature + Nonce Gate in transaction-engine.ts
ts
Copy
Edit
// server/transaction-engine.ts
import { verifySignature } from '@/lib/crypto';
import { walletDao } from '@/database/walletDao';
import { transactions } from '@/database/transactionDao';

export async function commitTransaction(tx: Transaction): Promise<void> {
  // ① - Nonce check (replay-attack blocker)
  const sender = await walletDao.getWallet(tx.from);
  if (!sender) throw new Error('Unknown sender');

  if (tx.nonce !== sender.nonce + 1)
    throw new Error(`Invalid nonce.  Expected ${sender.nonce + 1}`);

  // ② - Signature check (authenticity)
  const ok = verifySignature(
    sender.publicKey,
    JSON.stringify({ ...tx, signature: undefined }),
    tx.signature,
  );
  if (!ok) throw new Error('Bad signature');

  // ③ - Record + bump nonce in same DB tx
  await db.transaction(async (trx) => {
    await transactions.create(trx, tx);
    await walletDao.bumpNonce(trx, sender.address);
  });
}
Side-effects:

No write happens until both checks pass.

Any existing tests that called commitTransaction without a real sig/nonce will now fail — update them.

2 — JWT Wall on Sensitive Routes
2.1 Fast auth middleware
ts
Copy
Edit
// server/middleware/auth.ts
import jwt from 'jsonwebtoken';
const SECRET = process.env.JWT_SECRET!;

export interface AuthRequest extends express.Request {
  user?: { id: string; wallet: string };
}

export function requireAuth(
  ttlSeconds = 3600,   // 1 h default
): express.RequestHandler {
  return (req: AuthRequest, res, next) => {
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) return res.status(401).json({ error: 'No token' });

    try {
      const payload = jwt.verify(token, SECRET, { maxAge: `${ttlSeconds}s` });
      req.user = payload as any;
      return next();
    } catch {
      return res.status(401).json({ error: 'Bad / expired token' });
    }
  };
}
2.2 Patch route bundles
ts
Copy
Edit
// server/routes/wallet.ts
router.use(requireAuth());              // <-- add
router.post('/create', createWallet);
router.get('/:address', getWallet);
...

// server/routes/badge.ts
router.use(requireAuth());              // all badge endpoints protected

// server/routes/drops.ts
router.use(requireAuth());

// server/routes/mining.ts
router.use(requireAuth());
(progress, staking, etc.: same one-liner)

3 — JWT Refresh / Revocation
Short-term (fast to ship):

keep TTL at 15 min (requireAuth(900)).

emit a refresh token cookie (HTTP-only, 7 days) from /auth/login.

add /auth/refresh that verifies the refresh cookie and re-issues a short-lived access token.

Medium-term:

create revoked_tokens table (token → expires_at).

push any “logout” or “password-change” tokens into it.

augment requireAuth with a fast DB / Redis lookup to deny revoked tokens.

(That’s literally two tiny extra lines; implement when you wire a cache.)

4 — Scrap Mock zkProofs Until Real SNARKs Land
Delete the export of generateProof & verifyProof in zkproof.ts.

Replace with:

ts
Copy
Edit
export function generateProof(): never {
  throw new Error('ZK proofs disabled until circuit integration');
}
export function verifyProof(): false { return false; }
In every call-site (staking reward claims, gov voting, etc.) wrap with:

ts
Copy
Edit
if (!zkproof.verifyProof(...)) return res.status(400).json({ error: 'Proof invalid / feature disabled' });
That stops a false sense of security without ripping the flow out.

5 — Rate-Limit & Hash-Rate Sanity on Mining
ts
Copy
Edit
// server/routes/mining.ts
import rateLimit from 'express-rate-limit';

const startLimiter = rateLimit({
  windowMs: 60_000,           // 1 minute
  max: 5,                     // 5 start attempts / min / IP
});

router.post('/start', requireAuth(), startLimiter, (req, res) => {
  const { reportedHashRate } = req.body;
  if (reportedHashRate > 100_000_000 /* 100 MH/s cap */)
    return res.status(400).json({ error: 'Hash-rate spoof detected' });

  miningService.startMining(req.user!.wallet, reportedHashRate);
  res.json({ ok: true });
});
(Stop route gets a lighter limiter, e.g., 30 req/min.)

6 — Patch Broken Calls / Paths
Frontend now expects:

/api/tx/recent (already done).

All wallet/badge/etc. calls must attach Authorization: Bearer <token> header.

Mining start POST must send { reportedHashRate } or omit for default.

Backend:

remove temporary redirect of /api/transactions/recent → avoid log spam.

ts
Copy
Edit
// server/routes.ts  (delete this snippet)
// app.get('/api/transactions/recent', (req, res) =>
//   res.redirect(301, '/api/tx/recent'),
// );
Smoke-Test Checklist
bash
Copy
Edit
# 1. Login → receive access & refresh tokens
POST /api/auth/login

# 2. Create wallet (authorized)
POST /api/wallet/create   (Bearer ...)

# 3. Send TX with bad sig → 400
POST /api/wallet/send

# 4. Send TX with good sig & nonce → 200, tx persists

# 5. Start mining with absurd hash-rate → 400
POST /api/mining/start

# 6. Start mining normal → 200
All tests pass ⇒ ship.

What’s Still Open?
Item	ETA	Notes
Real SNARK circuit (transfer + vote)	1–2 weeks	Use snarkjs or halo2 + small Rust server; out-of-scope for this patch
Revocation cache (Redis)	½ day	Drop-in once infra exists
Per-IP global rate-limit	1 h	Add app.use(rateLimit({ windowMs: … }))

Done. All critical exploits blocked, routes hardened, and future work scoped. Plug these patches in, re-deploy, and your console should finally be quiet—apart from the normal block-mint spam.