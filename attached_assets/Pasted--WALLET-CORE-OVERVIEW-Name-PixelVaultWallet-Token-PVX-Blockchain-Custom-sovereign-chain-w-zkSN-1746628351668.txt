🔧 WALLET CORE OVERVIEW
Name: PixelVaultWallet
Token: PVX
Blockchain: Custom sovereign chain w/ zkSNARK support
Wallet Type: Non-custodial, browser-accessible + CLI
Stack: Rust backend + REST API + Tailwind/AlpineJS frontend

🧱 REQUIRED WALLET FEATURES (MVP)
1. Create Wallet
Generates mnemonic or keypair (Ed25519 or secp256k1)

Stores securely in localStorage or user-side vault (not server)

Returns address + pubkey

ts
Copy
Edit
POST /api/wallet/create
→ { address, pubkey, mnemonic }
2. Import Wallet
Accepts mnemonic or private key

Reconstructs address + pubkey

ts
Copy
Edit
POST /api/wallet/import
→ { address, pubkey }
3. View Balance
Checks PVX balance

Checks staked, bonded, unbonded balances

Queries via address or session key

ts
Copy
Edit
GET /api/wallet/balance/:address
→ { balance, staked, rewards }
4. Send PVX
Signs and broadcasts TX

Requires sender's private key or injected signer

ts
Copy
Edit
POST /api/wallet/send
Body: {
  from,
  to,
  amount,
  memo,
  gas_limit
}
→ { tx_hash, status }
5. Stake / Unstake
Delegates to validators or stake pool

Withdraws from staking with cooldown

ts
Copy
Edit
POST /api/wallet/stake
→ { tx_hash, status }

POST /api/wallet/unstake
→ { tx_hash, cooldown_time }
6. Claim Rewards
Claims staking rewards or Thringlet-based bonuses

ts
Copy
Edit
POST /api/wallet/claim
→ { tx_hash, amount }
7. Transaction History
Lists TXs for a wallet (sent, received, staked, NFT, etc.)

ts
Copy
Edit
GET /api/wallet/history/:address
→ [ { tx_type, amount, to, from, timestamp, hash } ]
8. Generate QR / Address Share
Outputs wallet QR code for receiving

Also displays shortlink / copy-to-clipboard

9. Connect to dApps
Enables injected wallet connection to Dreamforge dashboard

Uses window.wallet or injected signer

ts
Copy
Edit
window.PVXWallet.connect() → { address }
10. Security and Storage
Store private key/mnemonic encrypted (browser vault or passphrase)

Add 2FA support if feasible

Use argon2 or pbkdf2 for key derivation

🎨 UI COMPONENTS TO BUILD
wallet.html panel: display balance, stake, send, receive

send-modal.html: form to send PVX

stake-modal.html: validator selection, amount input

import.html: field for mnemonic or private key

create.html: new wallet screen w/ save warning

qrcode.html: dynamic QR for receiving

⚙️ BACKEND STRUCTURE (REPLIT-READY)
If using Node.js (Express):

plaintext
Copy
Edit
/api/wallet/
├── create.js
├── import.js
├── send.js
├── stake.js
├── unstake.js
├── balance.js
├── claim.js
├── history.js
If using Rust + Axum:

rust
Copy
Edit
routes! {
  POST /api/wallet/create -> create_wallet
  POST /api/wallet/import -> import_wallet
  POST /api/wallet/send   -> send_tx
  POST /api/wallet/stake  -> stake
  POST /api/wallet/unstake -> unstake
  POST /api/wallet/claim  -> claim_rewards
  GET  /api/wallet/balance/:addr -> get_balance
  GET  /api/wallet/history/:addr -> tx_history
}
🔒 ZERO BS RULE
Never expose private keys server-side.

All signing is done client-side unless CLI.

Encrypt everything that touches user keys.