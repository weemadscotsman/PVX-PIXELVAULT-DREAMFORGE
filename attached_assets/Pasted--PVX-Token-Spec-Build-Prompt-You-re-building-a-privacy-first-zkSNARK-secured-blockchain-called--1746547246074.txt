🔧 PVX Token Spec — Build Prompt
You're building a privacy-first, zkSNARK-secured blockchain called PIXELVAULT, featuring a native token: PVX.

🎯 OBJECTIVE
Design and deploy the PVX token standard with the following characteristics:

📦 TOKEN PARAMETERS
Token Name: PixelVault Token (PVX)

Total Supply: 6,009,420,000 PVX (fixed)

Decimals: 6 (micro-units = μPVX)

Smallest unit: 0.000001 PVX (1 μPVX)

Minting Authority: Genesis distribution only, no post-gen inflation

Burnable: Yes (optional per-chain logic)

🔐 PRIVACY LAYER
Use zkSNARKs (Halo2 / ZEXE) to protect:

Balances

Transactions

Voting records

All public interactions must support zero-knowledge proof verification without revealing sensitive user data.

⚒️ MINING & REWARDS (BTC-style, with enhancements)
Fair mining enabled, with custom hash equalization to prevent ASIC/GPU advantage

Initial block reward: 150 PVX per block

Halving Logic: Every 210,000 blocks (just like Bitcoin)

150 → 75 → 37.5 → … until reward approaches zero

Block time: ~15 seconds (XRP-inspired speed)

Max miner reward: 50% of block reward (other 50% for governance, staking pool, or vault reserve)

Mining algorithm: SHA3 variant + zk proof commit layer

🧠 STAKING & GOVERNANCE (XRP-inspired voting, DAO rules optional)
Users may stake PVX to:

Vote on proposals

Secure passive yield

Access premium dropzones (like YCATA)

Voting power = amount * lock duration (e.g. 1 PVX staked for 1 year > 10 PVX for 1 day)

Governance proposals must:

Be signed using zk-authenticated wallets

Include TTL (time to live), quorum, and rollback trigger

Optional “veto guardian” account may be assigned to kill malicious proposals (revocable via DAO vote)

🧬 WALLET LOGIC
Each user can generate a zk wallet via CLI or Web UI (Page 3)

Keys stored in-browser via localStorage or indexedDB

Mnemonic backup optional

Show full balance (PVX) + micro-units (μPVX) where applicable

Auto-refresh balance after mint, send, mine, or drop

🔄 TRANSACTIONS
Max TX speed: XRP-like low-latency (sub 2s target)

TXs must:

Generate zk proofs (Halo2 recommended)

Cost fixed network fee (burned or partially recycled)

Terminal CLI command structure:

sh
Copy
Edit
send --to <address> --amount <PVX> --note "<optional>"
mine --start
stake --amount <PVX> --duration <days>
vote --proposal <id> --option [yes|no|abstain]
📈 OPTIONAL INTEGRATIONS
📊 Analytics dashboard with anonymized usage trends

🧠 DEX integration (Uniswap-style) for PVX swaps

📦 NFT minting engine via CLI (mintnft --file ./ycata.glb)

🎁 Drop terminal interactions (for secret drops, Thringlets, etc)

👾 DEV DELIVERY
Start with:

Genesis wallet + keypair generation (CLI + browser)

Basic TX logic (send, receive, mine)

Halving & reward engine

Staking + proposal module

Wrap all in WebAssembly + Rust glue for frontend

You want it lean and modular, with zk-native code and no fluff.
Chain must be testable via CLI and fronted by your custom UI (Page 3, Dreamforge dashboard).