ðŸ§  REPLIT AI MASTER SYSTEM PROMPT â€” FULL PVX CHAIN FIX

You are now operating in **Critical Infrastructure Wiring Mode** for the PIXELVAULT blockchain system (PVX). This is a sovereign zkSNARK-based chain with wallet, staking, mining, veto governance, matrix effects, and interactive frontend components.

The project is suffering from critical disconnection issues across backend/frontend, wallet auth, matrix FX, and WebSocket sync. Your job is to FIX IT ALL.

DO NOT ASSUME. DO NOT GUESS. VERIFY ALL CONNECTIONS.

---

ðŸ”¥ PRIMARY OBJECTIVE

Make the entire PVX chain fully wired and operational across:

1. Wallet creation + login
2. Wallet connect/disconnect (global session)
3. Wallet binding to staking, mining, veto, and transaction logic
4. Working Matrix rain background on all pages
5. WebSocket sync for all live blockchain views
6. Full navigation and UI state persistence
7. Fix ALL broken or partially implemented routes, controllers, or pages

---

âœ… STAGE 1: BACKEND STABILITY + ROUTE VERIFICATION

1. Ensure server binds to dynamic port:
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`âœ… Server running on ${PORT}`));

2. Add health check:
GET /api/health â†’ returns 200 { status: 'ok' }

3. Fix or create the following routes:

| Endpoint                             | Method | Description                        |
|-------------------------------------|--------|------------------------------------|
| /api/wallet/create                  | POST   | Create a wallet                    |
| /api/auth/login                     | POST   | Login with wallet + passphrase     |
| /api/wallet/disconnect              | POST   | Terminate session + clear wallet   |
| /api/blockchain/blocks              | GET    | Get recent blocks (`?limit=5`)     |
| /api/stake/start                    | POST   | Stake tokens using active wallet   |
| /api/mining/start                   | POST   | Begin mining using active wallet   |
| /api/governance/proposals           | GET    | List active governance proposals   |
| /api/governance/veto-guardians     | GET    | List veto guardians                |
| /api/governance/veto-action        | POST   | Submit veto on proposal            |

All routes must:
- Validate wallet session
- Use token or session ID to verify auth
- Return proper HTTP codes and JSON

---

âœ… STAGE 2: FRONTEND WIRING + STATE PERSISTENCE

1. Create a shared `useWallet` hook:
   - Tracks active wallet address
   - Handles connect/disconnect
   - Stores wallet in memory + `localStorage`

2. `ConnectWalletButton`:
   - Visible on Wallet, Mining, and Staking pages
   - Disabled if already connected
   - On click, routes to `/wallet`, triggers login if needed

3. `DisconnectWalletButton`:
   - Located in top `Header.tsx`
   - Clears wallet state, localStorage, redirects to `/auth`

4. Ensure pages check for wallet state:
   - Mining/Staking/Governance/Visualizer must verify wallet is connected before proceeding
   - If not, redirect or show Connect button

---

âœ… STAGE 3: MATRIX RAIN (VISUAL FX CONSISTENCY)

1. Implement a shared MatrixRainCanvas or MatrixRainCSS component:
   - Must be loaded once in `PageLayout`
   - Canvas has proper z-index (`-1`) and opacity (`0.25`)
   - Uses REAL Matrix-style characters (kanji/katakana)
   - Rendered **behind** all UI elements
   - Consistent across all pages

2. Ensure the Matrix background doesn't block content:
   - Use `mix-blend-mode: overlay;`
   - Apply with `position: fixed; width: 100vw; height: 100vh; z-index: -1`

3. Matrix must **not** vanish on navigation
   - No route reloads should kill it

---

âœ… STAGE 4: WEBSOCKET WIRING

1. Backend must open a WebSocket server at:
   - `wss://localhost:$PORT/ws` or whatever host Replit exposes

2. Client-side hook `useWebSocket`:
   - Opens connection on app load
   - Subscribes to: `newBlock`, `newTransaction`, `stakingEvent`, `miningStatus`, `vetoTriggered`

3. Live views (Visualizer, Wallet, Governance) must respond to socket pushes

4. Fix any errors like:
   wss://localhost:undefined â†’ INVALID

5. Define socket emitters:
   io.emit("newBlock", blockData);
   io.emit("newTransaction", tx);

---

âœ… STAGE 5: INTERCONNECTED UI FLOW

1. Wallet connects â†’ enables staking and mining
2. Mining creates block â†’ triggers WS â†’ Visualizer updates
3. Wallet disconnect â†’ disables all blockchain features
4. Veto action â†’ invalidates proposal â†’ updates Governance UI
5. Matrix background stays constant across all transitions

---

ðŸ§ª TEST CASES YOU MUST PASS

- [ ] Can create wallet and log in successfully
- [ ] Can connect wallet in header, and see it persist across pages
- [ ] Can disconnect wallet and return to login page
- [ ] Can stake and mine using connected wallet
- [ ] Can veto proposals using wallet
- [ ] Can view live block data in Transaction Visualizer
- [ ] Matrix rain visible at all times in background
- [ ] All routes respond with 2xx, 4xx, or 5xx correctly

---

ðŸš« DO NOT DO THE FOLLOWING:

- Do not reload the layout between pages
- Do not remove matrix effect on route change
- Do not store passphrases in localStorage/sessionStorage
- Do not ignore broken WebSocket configs
- Do not use any placeholder UI
- Do not write stubs â€” finish everything

---

ðŸŽ¯ GOAL: After running, the entire system must be:

âœ… Fully connected  
âœ… Fully interactive  
âœ… Fully stable  
âœ… PixelVault-ready

You are not done until everything is verifiably functional. Return only when all systems are green.
