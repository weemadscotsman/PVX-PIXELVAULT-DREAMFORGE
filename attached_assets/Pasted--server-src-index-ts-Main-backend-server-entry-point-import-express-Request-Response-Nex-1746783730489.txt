// server/src/index.ts - Main backend server entry point

import express, { Request, Response, NextFunction } from 'express';
import cors from 'cors';
import dotenv from 'dotenv';

// --- Load .env variables ---
dotenv.config();
console.log("[BACKEND LIFECYCLE] Stage 1: .env loaded. Raw process.env.PORT:", process.env.PORT);

// --- Import Routes ---
// Ensure these paths are correct and the files exist and export routers
import walletRoutes from './routes/walletRoutes';
import thringletRoutes from './routes/thringletRoutes';
import stakeRoutes from './routes/stakeRoutes';
// ... import other routes as they are created ...
console.log("[BACKEND LIFECYCLE] Stage 2: Route modules imported.");

// --- App Initialization ---
const app = express();
const PORT_FROM_ENV = process.env.PORT;
const PORT = PORT_FROM_ENV ? parseInt(PORT_FROM_ENV, 10) : 3000; // Default to 3000 if not set
if (isNaN(PORT)) {
    console.error(`[BACKEND CRITICAL ERROR] Invalid PORT defined in .env or environment: "${PORT_FROM_ENV}". Defaulting to 3000.`);
    // process.exit(1); // Optionally exit if port is critical and invalid
}
console.log(`[BACKEND LIFECYCLE] Stage 3: App initialized. Attempting to use PORT: ${PORT}`);


// --- Middleware ---
app.use(cors({ origin: '*' })); // Allow all for dev
app.use(express.json());
console.log("[BACKEND LIFECYCLE] Stage 4: Core middleware (cors, json) added.");

// --- Basic Test Route ---
app.get('/api/ping', (req: Request, res: Response) => {
  console.log("[BACKEND REQUEST] GET /api/ping");
  res.status(200).json({ status: "ok", message: "PixelVault Wallet Backend is Live", timestamp: Date.now() });
});
console.log("[BACKEND LIFECYCLE] Stage 5: /api/ping route added.");

// --- Mount API Routes ---
console.log("[BACKEND LIFECYCLE] Stage 6: Mounting feature API routes...");
try {
    app.use('/api/wallet', walletRoutes);
    app.use('/api/thringlet', thringletRoutes);
    app.use('/api/stake', stakeRoutes);
    // ... app.use('/api/feature', featureRoutes); ...
    console.log("[BACKEND LIFECYCLE] Stage 6a: Feature routes mounted successfully.");
} catch (routeError: any) {
    console.error("❌ [BACKEND CRITICAL ERROR] Failed to mount routes:", routeError.message);
    process.exit(1); // Exit if routes can't be mounted
}


// --- GENERIC ERROR HANDLING MIDDLEWARE (Catches errors from routes) ---
app.use((err: Error, req: Request, res: Response, next: NextFunction) => {
    console.error('❌ [BACKEND GLOBAL ERROR HANDLER]', err.stack || err.message);
    const statusCode = (res.statusCode && res.statusCode !== 200) ? res.statusCode : 500;
    res.status(statusCode).json({
        error: 'Internal Server Error',
        message: err.message // In dev, you might send err.stack, but not in prod
    });
});
console.log("[BACKEND LIFECYCLE] Stage 7: Generic error handling middleware added.");

// --- 404 NOT FOUND HANDLING (Catches requests to undefined routes) ---
app.use((req: Request, res: Response, next: NextFunction) => {
    console.warn(`[BACKEND WARNING] 404 Not Found: ${req.method} ${req.originalUrl}`);
    res.status(404).json({ error: 'Not Found', message: `API endpoint not found: ${req.originalUrl}` });
});
console.log("[BACKEND LIFECYCLE] Stage 8: 404 handling middleware added.");


// --- SERVER START ---
console.log("[BACKEND LIFECYCLE] Stage 9: Attempting to start server...");
try {
    const server = app.listen(PORT, () => {
      console.log(`✅ [BACKEND ONLINE] Server successfully listening on port ${PORT}`);
      console.log(`   Test Ping: http://localhost:${PORT}/api/ping`);
      console.log(`   Wallet Create (POST): http://localhost:${PORT}/api/wallet/create`);
    });

    server.on('error', (error: any) => {
        if (error.syscall !== 'listen') {
            throw error;
        }
        switch (error.code) {
            case 'EACCES':
                console.error(`❌ [BACKEND CRITICAL ERROR] Port ${PORT} requires elevated privileges.`);
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(`❌ [BACKEND CRITICAL ERROR] Port ${PORT} is already in use. Is another server running?`);
                process.exit(1);
                break;
            default:
                throw error;
        }
    });

} catch (serverStartError: any) {
    console.error("❌ [BACKEND CRITICAL ERROR] FAILED TO START SERVER:", serverStartError.message);
    process.exit(1);
}


// --- Keep Alive for Replit (if needed, sometimes Replit sleeps idle projects) ---
// const http = require('http');
// setInterval(function() {
//   try {
//     const previewUrl = process.env.REPL_SLUG ? `https://${process.env.REPL_SLUG}.${process.env.REPL_OWNER}.replit.dev/api/ping` : `http://localhost:${PORT}/api/ping`;
//     console.log(`[KEEP ALIVE] Pinging self at ${previewUrl}`);
//     http.get(previewUrl, (res) => {
//       console.log(`[KEEP ALIVE] Ping response: ${res.statusCode}`);
//     }).on('error', (err) => {
//       console.error(`[KEEP ALIVE] Ping error: ${err.message}`);
//     });
//   } catch (e) { console.error("[KEEP ALIVE] Error in ping interval:", e); }
// }, 280000); // Every 4 minutes and 40 seconds
Use code with caution.
TypeScript
Instructions for You:
Replace Code: Go to server/src/index.ts in your Replit project. Delete all the existing code in that file and paste the code above.
Check Dependencies: In the Replit Shell, run npm install express cors dotenv @types/express @types/cors --save to make sure these are definitely installed.
Run Server: Click the "Run" button in Replit.
Observe Server Console: Watch the console messages in Replit very carefully.
Do you see all the [BACKEND LIFECYCLE] Stage X: ... messages?
Does it get to ✅ [BACKEND ONLINE] Server successfully listening on port ...?
Or does it stop and show an error message before that? If so, what is the error?